import{c as d,b as l}from"./api-C9ytrIjn.js";const o=[{id:"1",name:"Alice Johnson",email:"alice.johnson@example.com",tingkat:"XI",kelas:"IPA-1",academicStatus:"good",avatar:"/assets/avatars/avatar-1.png",grade:"XI",class:"IPA-1",photo:"/assets/avatars/avatar-1.png"},{id:"2",name:"Bob Smith",email:"bob.smith@example.com",tingkat:"XII",kelas:"IPS-2",academicStatus:"warning",avatar:"/assets/avatars/avatar-2.png",grade:"XII",class:"IPS-2",photo:"/assets/avatars/avatar-2.png"},{id:"3",name:"Alex Johnson",email:"alex.johnson@example.com",tingkat:"X",kelas:"IPA-3",academicStatus:"critical",avatar:"/assets/avatars/avatar-3.png",grade:"X",class:"IPA-3",photo:"/assets/avatars/avatar-3.png"}];let c=!0;const i=a=>{const e=new Set,n=[];for(const t of a)if(!e.has(t.id))e.add(t.id),n.push(t);else{const s=`${t.id}-${Date.now()}`;e.add(s),n.push({...t,id:s})}return n},h=async(a,e=1,n=10)=>{try{if(c){console.log("Using mock student data");let t=[...o];if(a&&(a.tingkat&&(t=t.filter(r=>r.tingkat===a.tingkat)),a.kelas&&(t=t.filter(r=>r.kelas===a.kelas)),a.academicStatus&&(t=t.filter(r=>r.academicStatus===a.academicStatus)),a.searchQuery)){const r=a.searchQuery.toLowerCase();t=t.filter(u=>u.name.toLowerCase().includes(r)||u.email.toLowerCase().includes(r))}const s=i(t);return{data:s,totalPages:1,currentPage:1,count:s.length}}try{const{signal:t,clearTimeout:s}=d(),r=await l.get("/students/",{signal:t,params:{page:e,limit:n,...a}});s();const u=i(r.data.results||[]);return{data:u,currentPage:r.data.current_page||e,totalPages:r.data.total_pages||Math.ceil((r.data.count||0)/n),count:r.data.count||u.length}}catch(t){throw console.error("Error fetching students with API:",t),t}}catch(t){console.error("Error fetching students:",t),c=!0;const s=i(o);return{data:s,totalPages:1,currentPage:1,count:s.length}}},m=async a=>{try{if(c){const s=o.find(r=>r.id===a);if(!s)throw new Error("Student not found");return s}const{signal:e,clearTimeout:n}=d(),t=await l.get(`/students/${a}/`,{signal:e});return n(),t.data}catch(e){if(console.error(`Error fetching student with ID ${a}:`,e),c){const n=o.find(t=>t.id===a);if(n)return n}throw e}},p=async a=>{try{if(c){const s={...a,id:String(o.length+1)};return o.push(s),s}const{signal:e,clearTimeout:n}=d(),t=await l.post("/students/",a,{signal:e});return n(),t.data}catch(e){if(console.error("Error creating student:",e),!c){c=!0;const n={...a,id:String(Date.now())};return o.push(n),n}throw e}};export{m as a,p as c,h as g};
