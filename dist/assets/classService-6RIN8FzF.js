import{a as d,m as i}from"./index-DSnDXcoI.js";const l=[{classId:"C2023-XI-IPA1",schoolId:"C2023-XI-IPA1",name:"XI IPA-1",gradeLevel:"XI",academicYear:"2023/2024",teacherName:"Budi Santoso",studentCount:32,id:"1"},{classId:"C2023-XII-IPS2",schoolId:"C2023-XII-IPS2",name:"XII IPS-2",gradeLevel:"XII",academicYear:"2023/2024",teacherName:"Siti Aminah",studentCount:28,id:"2"},{classId:"C2023-X-IPA3",schoolId:"C2023-X-IPA3",name:"X IPA-3",gradeLevel:"X",academicYear:"2023/2024",teacherName:"Ahmad Hidayat",studentCount:34,id:"3"}];let g=!1;const h=s=>{const t=new Set,o=[];for(const e of s)if(!t.has(e.classId))t.add(e.classId),o.push(e);else{const r=`${e.classId}-${Date.now()}`;t.add(r),o.push({...e,classId:r})}return o},I=s=>{const t=new Set,o=[];for(const e of s)if(e.id)if(!t.has(e.id))t.add(e.id),o.push(e);else{const r=`${e.id}-${Date.now()}`;t.add(r),o.push({...e,id:r})}else o.push(e);return o},w=async(s,t=1,o=10)=>{try{if(g){console.log("Using mock class data");let e=[...l];if(s&&(s.grade&&(e=e.filter(c=>c.gradeLevel.startsWith(s.grade))),s.academicYear&&(e=e.filter(c=>c.academicYear===s.academicYear)),s.searchQuery)){const c=s.searchQuery.toLowerCase();e=e.filter(n=>{var u;return n.name.toLowerCase().includes(c)||((u=n.teacherName)==null?void 0:u.toLowerCase().includes(c))})}const r=h(e),a=I(r);return{data:a,totalPages:1,currentPage:1,count:a.length}}try{const{signal:e,clearTimeout:r}=d();console.log("🔌 Making API request to:","/classes"),console.log("📊 Filters:",s),console.log("📄 Page:",t,"Limit:",o);const a=await i.get("/classes",{signal:e,params:{page:t,limit:o,...s}});r(),console.log("✅ API Response received:",a.data);const c=h(a.data.data||[]),n=I(c);return{data:n,currentPage:a.data.currentPage||t,totalPages:a.data.totalPages||Math.ceil((a.data.totalRecords||0)/o),count:a.data.totalRecords||n.length}}catch(e){throw console.error("Error fetching classes with API:",e),e}}catch(e){throw console.error("Error fetching classes:",e),console.log("⚠️ API call failed, but keeping API connection alive for other functions"),e}},m=async s=>{try{const{signal:t,clearTimeout:o}=d();console.log("🔌 Fetching class with ID:",s);const e=await i.get(`/classes/${s}`,{signal:t});return o(),console.log("✅ Class data fetched:",e.data),e.data}catch(t){console.error(`Error fetching class with ID ${s}:`,t);let o=l.find(e=>e.schoolId===s);if(o||(o=l.find(e=>e.id===s)),o)return console.log("📋 Using mock data for class:",s),o;throw t}},y=async s=>{var t,o;try{if(g){const c=((t=s.academicYear)==null?void 0:t.split("/")[0])||new Date().getFullYear(),n=s.schoolId||`C${c}-${s.gradeLevel}-${s.name.replace(/\s/g,"")}`;if(l.some(f=>f.schoolId===n))throw new Error("School ID already exists. Please use a different ID.");const u={...s,schoolId:n,id:String(l.length+1)};return l.push(u),u}const{signal:e,clearTimeout:r}=d(),a=await i.post("/classes",s,{signal:e});return r(),a.data}catch(e){if(console.error("Error creating class:",e),!g){g=!0;const r=((o=s.academicYear)==null?void 0:o.split("/")[0])||new Date().getFullYear(),a=s.schoolId||`C${r}-${s.gradeLevel}-${s.name.replace(/\s/g,"")}`;if(l.some(n=>n.schoolId===a))throw new Error("School ID already exists. Please use a different ID.");const c={...s,schoolId:a,id:String(Date.now())};return l.push(c),c}throw e}},P=async s=>{try{const{signal:t,clearTimeout:o}=d();return console.log("🗑️ Soft deleting class:",s),await i.delete(`/classes/${s}`,{signal:t}),o(),console.log("✅ Class soft deleted"),!0}catch(t){throw console.error("❌ Error soft deleting class:",t),t}},p=async s=>{try{const{signal:t,clearTimeout:o}=d();console.log("🔌 Fetching student count for class:",s);const e=await i.get(`/classes/${s}/students`,{signal:t});return o(),console.log("✅ Student count fetched:",e.data.count),e.data.count||0}catch(t){console.error("❌ Error fetching student count for class:",s,t);try{return(await m(s)).studentCount||0}catch(o){return console.error("❌ Could not get fallback count from class data:",o),0}}},S=async s=>{try{const{signal:t,clearTimeout:o}=d(),e=await i.get(`/classes/${s}/students`,{signal:t});return o(),{students:e.data.students||[],count:e.data.count||0}}catch(t){return console.error("❌ Error fetching detailed students for class:",s,t),{students:[],count:0}}};export{p as a,m as b,y as c,S as d,w as g,P as s};
