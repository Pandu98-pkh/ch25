import{c as l,b as u}from"./api-C9ytrIjn.js";const o=[{id:"1",name:"XI IPA-1",gradeLevel:"XI",academicYear:"2023/2024",teacherName:"Budi Santoso",studentCount:32},{id:"2",name:"XII IPS-2",gradeLevel:"XII",academicYear:"2023/2024",teacherName:"Siti Aminah",studentCount:28},{id:"3",name:"X IPA-3",gradeLevel:"X",academicYear:"2023/2024",teacherName:"Ahmad Hidayat",studentCount:34}];let c=!0;const g=e=>{const s=new Set,r=[];for(const t of e)if(!s.has(t.id))s.add(t.id),r.push(t);else{const a=`${t.id}-${Date.now()}`;s.add(a),r.push({...t,id:a})}return r},h=async(e,s=1,r=10)=>{try{if(c){console.log("Using mock class data");let t=[...o];if(e&&(e.grade&&(t=t.filter(n=>n.gradeLevel.startsWith(e.grade))),e.academicYear&&(t=t.filter(n=>n.academicYear===e.academicYear)),e.searchQuery)){const n=e.searchQuery.toLowerCase();t=t.filter(d=>{var i;return d.name.toLowerCase().includes(n)||((i=d.teacherName)==null?void 0:i.toLowerCase().includes(n))})}const a=g(t);return{data:a,totalPages:1,currentPage:1,count:a.length}}try{const{signal:t,clearTimeout:a}=l(),n=await u.get("/classes/",{signal:t,params:{page:s,limit:r,...e}});a();const d=g(n.data.results||[]);return{data:d,currentPage:n.data.current_page||s,totalPages:n.data.total_pages||Math.ceil((n.data.count||0)/r),count:n.data.count||d.length}}catch(t){throw console.error("Error fetching classes with API:",t),t}}catch(t){console.error("Error fetching classes:",t),c=!0;const a=g(o);return{data:a,totalPages:1,currentPage:1,count:a.length}}},f=async e=>{try{if(c){const a=o.find(n=>n.id===e);if(!a)throw new Error("Class not found");return a}const{signal:s,clearTimeout:r}=l(),t=await u.get(`/classes/${e}/`,{signal:s});return r(),t.data}catch(s){if(console.error(`Error fetching class with ID ${e}:`,s),c){const r=o.find(t=>t.id===e);if(r)return r}throw s}},w=async e=>{try{if(c){const a=o.find(d=>d.id===e);if(!a)throw new Error("Class not found");const n=Array.from({length:a.studentCount},(d,i)=>({id:`student-${e}-${i+1}`,name:`Student ${i+1}`,email:`student${i+1}@example.com`,grade:a.gradeLevel.split(" ")[0],class:a.name,tingkat:a.gradeLevel.split(" ")[0],kelas:a.name,academicStatus:["good","warning","critical"][Math.floor(Math.random()*3)]}));return{students:n,totalCount:n.length}}const{signal:s,clearTimeout:r}=l(),t=await u.get(`/classes/${e}/students/`,{signal:s});return r(),{students:t.data.students||[],totalCount:t.data.count||0}}catch(s){if(console.error(`Error fetching students for class ID ${e}:`,s),c){const r=o.find(a=>a.id===e);if(!r)throw new Error("Class not found");const t=Array.from({length:5},(a,n)=>({id:`student-${e}-${n+1}`,name:`Student ${n+1}`,email:`student${n+1}@example.com`,grade:r.gradeLevel.split(" ")[0],class:r.name,tingkat:r.gradeLevel.split(" ")[0],kelas:r.name,academicStatus:["good","warning","critical"][Math.floor(Math.random()*3)]}));return{students:t,totalCount:t.length}}throw s}},C=async e=>{try{if(c){const a={...e,id:String(o.length+1)};return o.push(a),a}const{signal:s,clearTimeout:r}=l(),t=await u.post("/classes/",e,{signal:s});return r(),t.data}catch(s){if(console.error("Error creating class:",s),!c){c=!0;const r={...e,id:String(Date.now())};return o.push(r),r}throw s}};export{f as a,w as b,C as c,h as g};
